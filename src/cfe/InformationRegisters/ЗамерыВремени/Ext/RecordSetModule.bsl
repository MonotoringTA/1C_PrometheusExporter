// Выгрузка метрик в Prometheus: удобный HTTP-клиент для 1С:Предприятие 8
//
// Copyright 2021 Valentin Kozlov
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//
// URL: https://github.com/ValentinKozlov/1C_PrometheusExporter
// e-mail: i_frog@mail.ru
// Версия: 0.0.1
// Требования: платформа 1С версии 8.3.17 и выше

Функция ПолучитьСписокБакетов() 
	
	//Лучше переделать на справочник, так как бакеты могут меняться, но пока руки не дошли
	
	Попытка 
		СписокЗначенийПеречисления = Новый СписокЗначений;	 

		// Прочитать значения перечисления из базы данных 
		Запрос = Новый Запрос;

		Запрос.Текст = "
		|ВЫБРАТЬ
		|   APDEXBuckets.Ссылка КАК Ссылка,   
		|   ПРЕДСТАВЛЕНИЕ(APDEXBuckets.Ссылка) КАК ПредставлениеЗначения
		|ИЗ
		|   Перечисление.APDEXBuckets КАК APDEXBuckets";

		Результат = Запрос.Выполнить();	
		Выборка = Результат.Выбрать(); 
		Пока Выборка.Следующий() Цикл
			// Заполнить значения списка
			СписокЗначенийПеречисления.Добавить(Выборка.Ссылка,Выборка.ПредставлениеЗначения);
		КонецЦикла;
		
		Возврат СписокЗначенийПеречисления;
		
	Исключение  		
		ИмяСобытия = "Функция МодульНабораЗаписей.ПолучитьЗначенияПеречисления'";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,ЭтотОбъект.Метаданные(),,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		Возврат 0;
	КонецПопытки		
	
КонецФункции


Функция ПолучитьТекущееЗначениеМетрикПоОперации(Знач КлючеваяОперация) 
    Попытка
		Запрос = Новый Запрос; 
		
		Запрос.Текст = 
			"ВЫБРАТЬ			
			|	APDEXMetrics.APDEXbucket КАК APDEXbucket,
			|	APDEXMetrics.Amount КАК Amount,
			|	APDEXMetrics.KeyOperationTime КАК KeyOperationTime,
			|	APDEXMetrics.TotalAmount КАК TotalAmount
			|ИЗ
			|	РегистрСведений.APDEXMetrics КАК APDEXMetrics
			|ГДЕ
			|	APDEXMetrics.KeyOperation = &КлючеваяОперация
			|
			|УПОРЯДОЧИТЬ ПО
			|	APDEXbucket АВТОУПОРЯДОЧИВАНИЕ			
			|";
		
		Запрос.УстановитьПараметр("КлючеваяОперация", КлючеваяОперация);
		
		РезультатЗапроса = Запрос.Выполнить();
		ТабЗначРезультатЗапроса = РезультатЗапроса.Выгрузить();
		
		Возврат ТабЗначРезультатЗапроса; 
		
	Исключение  
		
		ИмяСобытия = "Функция МодульНабораЗаписей.ПолучитьТекущееЗначениеМетрикПоОперации";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,ЭтотОбъект.Метаданные(),,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат 0;
		
	КонецПопытки	
КонецФункции


&После("ПриЗаписи")
 Процедура Prometeus_ПриЗаписи(Отказ, Замещение)   //что значат параметры?
		
	//Согласно задаче для формирования регистра с метриками типа "histogram" требуется получать данные нарастающим итогом по всем замерам.
	//Для этого используется регистр сведений и в нем всегда считается только одна последняя операция, чтобы при росте количества данных,
	//запрос выполнялся быстро.	
	
	СписокЗначенийПеречисления = ПолучитьСписокБакетов();
	Если СписокЗначенийПеречисления = 0 Тогда
		Возврат;
	КонецЕсли;             
	
	Для Каждого ЗаписьЗамера Из ЭтотОбъект Цикл
		
		КлючеваяОперация = ЗаписьЗамера.КлючеваяОперация;
		ТабЗначРезультатЗапроса = ПолучитьТекущееЗначениеМетрикПоОперации(КлючеваяОперация);
		
		Если ТабЗначРезультатЗапроса=0 Тогда 
			Возврат;
		КонецЕсли;
						
		//Формируем запись в регистр сведений для расчета и отправки метрики histogram в Prometheus		
		ПерваяЗапись = Истина;
		
		Для Каждого bucket Из СписокЗначенийПеречисления Цикл 
			BuketTime = Число(bucket.Представление);			
			//В регистр пишем все бакеты, даже нулевые, иначе APDEX в Grafana считается некорректно.
			НоваяСтрока = ТабЗначРезультатЗапроса.Добавить();
			НоваяСтрока.APDEXbucket = bucket.Значение;
			Если ЗаписьЗамера.ВремяВыполнения <= BuketTime Тогда 			    
				НоваяСтрока.TotalAmount = 1; 
				Если ПерваяЗапись Тогда                                         
					НоваяСтрока.Amount = 1;
					НоваяСтрока.KeyOperationTime = ЗаписьЗамера.ВремяВыполнения;
					ПерваяЗапись = Ложь;		
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		ТабЗначРезультатЗапроса.Свернуть("APDEXbucket","TotalAmount,Amount,KeyOperationTime");
		
		НаборЗаписей = РегистрыСведений.APDEXMetrics.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.KeyOperation.Установить(КлючеваяОперация); 
		
		Для Каждого ТекСтрока Из ТабЗначРезультатЗапроса Цикл
			НоваяЗапись = НаборЗаписей.Добавить();                 
		   	НоваяЗапись.KeyOperation = КлючеваяОперация; 
		   	НоваяЗапись.APDEXbucket = ТекСтрока.APDEXbucket; 
		   	НоваяЗапись.TotalAmount = ТекСтрока.TotalAmount; 
			НоваяЗапись.Amount = ТекСтрока.Amount; 
			НоваяЗапись.KeyOperationTime = ТекСтрока.KeyOperationTime;
			НоваяЗапись.EditStamp = ТекущаяДата();
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла; 

 КонецПроцедуры
