// Выгрузка метрик в Prometheus: удобный HTTP-клиент для 1С:Предприятие 8
//
// Copyright 2021 Valentin Kozlov
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//
// URL: https://github.com/ValentinKozlov/1C_PrometheusExporter
// e-mail: i_frog@mail.ru
// Версия: 0.0.1
// Требования: платформа 1С версии 8.3.17 и выше

//#Область Внешние методы

Функция ВерсияМодуля() Экспорт
	Возврат "0.0.1";	
КонецФункции


Функция ПолучитьПараметрыНастройкиОтправкиМетрикВPushgetway() Экспорт
	//Тут лучше сделать регистр сведений где хранить все настройки
	URL_Pushgetway = Константы.АдресСервераPushgateway.Получить();	 
	JobName = "1с";
	InstanceName = "bsp";                  
	
	//Делаем проверку ключевых параметров	 
	Если ПустаяСтрока(URL_Pushgetway) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ПустаяСтрока(JobName) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ПустаяСтрока(InstanceName) Тогда
		Возврат 0;
	КонецЕсли;
	
	ПараметрыНастройки = Новый Структура ("URL_Pushgetway, JobName, InstanceName",URL_Pushgetway,JobName,InstanceName);
	
	Возврат ПараметрыНастройки;
	 
КонецФункции    


//Пример для метрики типа "histogram":
//# HELP histogram_test Тестовая гистограмма
//# TYPE histogram_test histogram
//histogram_test_bucket{le="0.01"} 0.0 //Если в бакет не попадает, то нужно писать ноль иначе в Prometheus не считается APDEX 
//histogram_test_bucket{le="0.025"} 7 0.0
//histogram_test_bucket{le="0.05"} 90.0
//histogram_test_bucket{le="0.075"} 100.0
//histogram_test_bucket{le="+Inf"} 100.0
//histogram_test_count 100.0
//histogram_test_sum 7.256 //Общее фактическое время всех измерений

Функция ЗаписатьМетрикуВPushgetway(СписокПараметровЗаписи,ТипМетрики) Экспорт
	
	MetricsName = СписокПараметровЗаписи.MetricsName;
	MetricsComments = СписокПараметровЗаписи.MetricsComments;	
	ПараметрыОтправки = СписокПараметровЗаписи.ПараметрыОтправки;
	DataCollection =  СписокПараметровЗаписи.DataCollection;		
	
	//Формируем заголовок метрики. Для всех типов он будет одинаковым
	MetricsHeader ="# HELP "+MetricsName+" "+MetricsComments+"
	|# TYPE "+MetricsName+" "+Строка(ТипМетрики)+"
	|";	
		
	Если ТипМетрики = Перечисления.PrometheusMetricTypes.histogram	Тогда		
		
		Count = Формат(DataCollection.Count, "ЧДЦ=1; ЧРД=.; ЧРГ=; ЧГ=0");
		Sum = Формат(DataCollection.Sum, "ЧДЦ=3; ЧРД=.; ЧРГ=; ЧГ=0");
		Data = DataCollection.Data; 			
		
		MetricsBody = "";
			
		Для Каждого Body Из Data Цикл
			MetricsBody = MetricsBody+"
			|"+MetricsName+"_bucket{le="""+Body.le+"""} "+Формат(Body.Countle, "ЧДЦ=1; ЧРД=.; ЧН=0; ЧГ=0");
		КонецЦикла;
		
		MetricsBody = MetricsHeader+MetricsBody+"
		|"+MetricsName+"_bucket{le=""+Inf""} "+Count+"
		|"+MetricsName+"_count "+Count+"
		|"+MetricsName+"_sum "+Sum+"
		|";
		
		ПараметрыОтправки.Вставить("MetricsBody",MetricsBody);				
		
	ИначеЕсли ТипМетрики = Перечисления.PrometheusMetricTypes.gauge	Тогда
		//Блок не переделанный под текущую архитектуру, но полностью рабочий.
		
		////Записываем чистую метрику (gauge) в Prometheus		
		//МеткиМетрики = Новый Структура;
		//МеткиМетрики.Вставить("User",ЗаписьЗамера.Пользователь);
		//МеткиМетрики.Вставить("Session",Формат(ЗаписьЗамера.НомерСеанса,"ЧРГ=' '; ЧГ=0"));	
		////МеткиМетрики.Вставить("RecordDate",Формат(ЗаписьЗамера.ДатаЗаписиЛокальная,""));
		//МеткиМетрики.Вставить("TargetTime",Формат(КлючеваяОперация.ЦелевоеВремя, "ЧДЦ=3; ЧРД=.; ЧРГ=; ЧГ=0"));		

		//ВремПараметры.Вставить("LabelsList",МеткиМетрики);
		//ВремПараметры.Вставить("KeyOperation",КлючеваяОперация.Наименование);
		//
		//ПараметрыОтправки = Prometeus_ТрансформаторЗамеров.ПолучитьПараметрыОтправкиМетрики(ВремПараметры);
		//
		//Route = ПараметрыОтправки.Route;
		//KeyOperationENG = ПараметрыОтправки.KeyOperationENG+"_gauge"; 
		//
		//Metrics =СтрШаблон(
		//"# HELP %1 %2 
		//|# TYPE %1 gauge
		//|%1 %3
		//|", KeyOperationENG, КлючеваяОперация.Наименование,Формат(ЗаписьЗамера.ВремяВыполнения, "ЧДЦ=3; ЧРД=.; ЧРГ=; ЧГ=0"));
	ИначеЕсли ТипМетрики = Перечисления.PrometheusMetricTypes.counter Тогда
		
	ИначеЕсли ТипМетрики = Перечисления.PrometheusMetricTypes.summary Тогда
		//Этот тип очень похож на histogram возможно имеет смысл его объединить.
		
	КонецЕсли;
	
	//Собрали все параметры и отправляем
	Если ОтправитьМетрикуВPushgetway(ПараметрыОтправки, MetricsName)=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
КонецФункции

               
//#КонецОбласти



//#Область Внутренние методы
    
Функция ОтправитьМетрикуВPushgetway(ПараметрыОтправки, MetricsName)
	
	URL_Pushgetway = ПараметрыОтправки.URL_Pushgetway;
	JobName = ПараметрыОтправки.JobName;
	InstanceName = ПараметрыОтправки.InstanceName; 	
	LabelsList = ПараметрыОтправки.LabelsList;	
	MetricsBody = ПараметрыОтправки.MetricsBody;
		
	Route = "metrics/job/"+JobName+"/instance/"+InstanceName+"/"+СтруктураВСтроку(LabelsList)+"";		
	
	Ответ = Prometeus_Connector.Post(URL_Pushgetway + Route, MetricsBody);
		
	Если Ответ.КодСостояния <> 200 Тогда			
		ИмяСобытия = "Функция ОбработкаМетрик.ОтправитьМетрикуВPushgetway";
		ТекстОшибки = "Ошибка передачи метрик 
			|" + MetricsName + "
			| Текст ошибки:
			| " + Ответ.ТелоСтрокой + "
			| Маршрут метрики
			| " + Route;  
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

//#КонецОбласти


//#Область Вспомогательные методы

Функция Транслит(Вход) 
    Коды = Новый Соответствие;
    Коды.Вставить("ё","yo");
    Коды.Вставить("Ё","Yo");
    Нач = КодСимвола("А");
    Англ = "A" "B" "V" "G" "D" "E" "Zh" "Z" "I" "Y" "K" "L" "M" "N" "O" "P" "R" "S" "T" "U" "F" "Kh" "Ts" "Ch" "Sh" "Shch" "" "Y" "" "E" "Yu" "Ya" "a" "b" "v" "g" "d" "e" "zh" "z" "i" "y" "k" "l" "m" "n" "o" "p" "r" "s" "t" "u" "f" "kh" "ts" "ch" "sh" "shch" "" "y" "" "e" "yu" "ya";
    Для К = Нач по КодСимвола("я") Цикл
        Коды.Вставить(Символ(К), СтрПолучитьСтроку(Англ, К - Нач + 1));
    КонецЦикла;
    Выход = "";
    Для К=1 по СтрДлина(Вход) Цикл
        Бкв = Сред(Вход,К,1);
        Зн = Коды.Получить(Бкв);
        Выход = Выход + ?(Зн = Неопределено, Бкв, Зн);
    КонецЦикла;
    Возврат Выход;
КонецФункции

Функция СтруктураВСтроку(Знач ВходящаяСтруктура)
	
	СтроковоеПредставление = "";
	
	Для каждого Элемент Из ВходящаяСтруктура Цикл
		
		СтроковоеПредставление = СтроковоеПредставление + ?(НЕ ПустаяСтрока(СтроковоеПредставление), "/", "");		                                                                                  
		//СтроковоеПредставление = СтроковоеПредставление + "" + Элемент.Ключ + "/" + СокрЛП(СтрЗаменить(Элемент.Значение,"""", "")); //Удаляем кавычки для корректной обработки
		СтроковоеПредставление = СтроковоеПредставление + "" + Элемент.Ключ + "@base64/" + СтрокаВBase64(СокрЛП(СтрЗаменить(Элемент.Значение,"""", ""))); //Удаляем кавычки для корректной обработки
	КонецЦикла; 
	
	Возврат СтроковоеПредставление;
	
КонецФункции

Функция СтрокаВBase64(СтрокаДанных) Экспорт

    Поток = Новый ПотокВПамяти;
    Запись = Новый ЗаписьДанных(Поток, КодировкаТекста.UTF8);
    Запись.ЗаписатьСимволы(СтрокаДанных);
    Запись.Закрыть();
    ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
    СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
    СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, ""); // убираем ВК
    СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, ""); // убираем ПС
	
	//Хитрый BASE64
	//Base64 выводит 4 символа для каждого 3 байта, 
	//который он кодирует (другими словами, каждый символ кодирует 6 бит). 
	//Добавляемые символы добавляются так, что любая строка base64 всегда кратна 4 в длину, 
	//символы заполнения на самом деле не кодируют какие-либо данные.
	// Ну и прикол с плюсами и минуса - это огонь
	
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64,"=","");
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64,"+","-");
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64,"/","_");
	
	
    Возврат СтрокаФорматBase64;

КонецФункции 

//#КонецОбласти




